// Project: Category Aggression Lock
// Version: v1
// Created by: wicorn29 networks

(function() {
    const STORAGE_KEY = 'categoryAggressionLockActive';
    const BTN_ID = 'categoryAggressionLockBtn';
    
    // SVG Icons for locked and unlocked states (padlock with '+' for road)
    const SVG_LOCKED = `
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="12" y1="2" x2="12" y2="22" />
            <line x1="2" y1="12" x2="22" y2="12" />
            <rect x="8" y="11" width="8" height="11" rx="2" ry="2"></rect>
            <path d="M10 11V7a2 2 0 0 1 4 0v4"></path>
        </svg>
    `;
    const SVG_UNLOCKED = `
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="12" y1="2" x2="12" y2="22" />
            <line x1="2" y1="12" x2="22" y2="12" />
            <rect x="8" y="11" width="8" height="11" rx="2" ry="2"></rect>
            <path d="M16 11V7a4 4 0 0 0-8 0v4"></path>
        </svg>
    `;

    const TITLE_LOCKED_PREFIX = 'Category Aggression Lock: ON ';
    const TITLE_UNLOCKED_PREFIX = 'Category Aggression Lock: OFF ';
    const HELP_TEXT_LOCKED = '(Click to disable)';
    const HELP_TEXT_UNLOCKED = '(Click to enable)';

    // Function to set the onbeforeunload handler
    function setBeforeUnload(isActive) {
        if (isActive) {
            window.onbeforeunload = function() {
                // Browsers display a generic message, but this string helps identify the source.
                return 'Category Aggression Lock is active. Are you sure you want to leave or reload this page?';
            };
        } else {
            window.onbeforeunload = null;
        }
    }

    // Function to update the button's appearance and title
    function updateButton(isActive) {
        const btn = document.getElementById(BTN_ID);
        if (btn) {
            btn.innerHTML = isActive ? SVG_LOCKED : SVG_UNLOCKED; // Set SVG content
            btn.title = isActive ? TITLE_LOCKED_PREFIX + HELP_TEXT_LOCKED : TITLE_UNLOCKED_PREFIX + HELP_TEXT_UNLOCKED;
            
            // Set styles based on active state (black background with white icon when ON, vice-versa when OFF)
            btn.style.backgroundColor = isActive ? '#000' : '#FFF';
            btn.style.color = isActive ? '#FFF' : '#000'; // This sets the SVG stroke color
            btn.style.borderColor = isActive ? '#FFF' : '#000';
        }
    }

    // Function to toggle the lock state
    function toggleLock() {
        let isActive = localStorage.getItem(STORAGE_KEY) === 'true'; // Get current state
        isActive = !isActive; // Toggle it

        localStorage.setItem(STORAGE_KEY, isActive); // Save new state
        setBeforeUnload(isActive); // Apply the beforeunload handler
        updateButton(isActive); // Update button visual
    }

    // --- Main execution logic ---

    // Check if the button already exists (if script is run multiple times on same page)
    let existingBtn = document.getElementById(BTN_ID);
    if (existingBtn) {
        // If button exists, remove it and disable the lock to "deactivate"
        existingBtn.remove();
        localStorage.removeItem(STORAGE_KEY); // Clear saved state
        setBeforeUnload(false); // Disable handler
        return; // Exit
    }

    // Create the toggle button
    const btn = document.createElement('button');
    btn.id = BTN_ID;
    btn.style.position = 'fixed';
    btn.style.bottom = '10px'; // Closer to the corner
    btn.style.right = '10px'; // Closer to the corner
    btn.style.width = '35px'; // Smaller size
    btn.style.height = '35px'; // Smaller size
    btn.style.padding = '0'; // Remove padding, SVG fills space
    btn.style.borderRadius = '5px'; // Small rounded corners
    btn.style.border = '1px solid'; // Will be set by updateButton
    btn.style.cursor = 'pointer';
    btn.style.fontSize = '0'; // Hide potential text if any, only SVG matters
    btn.style.zIndex = '99999'; // Ensure it's on top of most content
    btn.style.boxShadow = '0px 1px 5px rgba(0,0,0,0.2)'; // Lighter shadow
    btn.style.display = 'flex';
    btn.style.justifyContent = 'center';
    btn.style.alignItems = 'center';

    // Add event listener to the button
    btn.addEventListener('click', toggleLock);

    // Add the button to the document body
    document.body.appendChild(btn);

    // Initialize the state based on localStorage or default to off
    let initialActiveState = localStorage.getItem(STORAGE_KEY) === 'true'; // Defaults to false if not found
    setBeforeUnload(initialActiveState);
    updateButton(initialActiveState); // Initial update for icon and title

})();